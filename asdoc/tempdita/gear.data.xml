<?xml version="1.0" encoding="UTF-8"?><apiPackage id="gear.data"><apiName>gear.data</apiName><apiDetail/><apiClassifier id="gear.data:GTreeNode"><apiName>GTreeNode</apiName><shortdesc>
	 </shortdesc><prolog><author>bright
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 </apiDesc></apiClassifierDetail><apiConstructor id="gear.data:GTreeNode:GTreeNode"><apiName>GTreeNode</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiData>null</apiData></apiParam></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="gear.data:GTreeNode:add"><apiName>add</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>gear.data:GTreeNode</apiOperationClassifier></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="gear.data:GTreeNode:findAt"><apiName>findAt</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>gear.data:GTreeNode</apiOperationClassifier></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Object"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="gear.data:GTreeNode:getChildAt"><apiName>getChildAt</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>gear.data:GTreeNode</apiOperationClassifier></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="int"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="gear.data:GTreeNode:protected:_children"><apiName>_children</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Vector$gear.data:GTreeNode"/></apiValueDef></apiValueDetail></apiValue><apiValue id="gear.data:GTreeNode:protected:_data"><apiName>_data</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Object"/></apiValueDef></apiValueDetail></apiValue><apiValue id="gear.data:GTreeNode:protected:_parent"><apiName>_parent</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>gear.data:GTreeNode</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="gear.data:GTreeNode:data:get"><apiName>data</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef></apiValueDetail></apiValue><apiValue id="gear.data:GTreeNode:numChildren:get"><apiName>numChildren</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="gear.data:GTreeNode:parent:get"><apiName>parent</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>gear.data:GTreeNode</apiValueClassifier></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="gear.data:GTree"><apiName>GTree</apiName><shortdesc>
	 </shortdesc><prolog><author>bright
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 </apiDesc></apiClassifierDetail><apiConstructor id="gear.data:GTree:GTree"><apiName>GTree</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="gear.data:GTree:toArray"><apiName>toArray</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="gear.data:GTree:root:get"><apiName>root</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>gear.data:GTreeNode</apiValueClassifier></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="gear.data:GBinaryNode"><apiName>GBinaryNode</apiName><shortdesc>
	 二叉树结点
	 
	 </shortdesc><prolog><author>BrightLi
	 </author><asMetadata/><asCustoms><version>20121112
	 </version></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>gear.core:IDispose</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 二叉树结点
	 
	 </apiDesc></apiClassifierDetail><apiConstructor id="gear.data:GBinaryNode:GBinaryNode"><apiName>GBinaryNode</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>value</apiItemName><apiType value="Object"/></apiParam></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="gear.data:GBinaryNode:count"><apiName>count</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="gear.data:GBinaryNode:dispose"><apiName>dispose</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="gear.data:GBinaryNode:getDepth"><apiName>getDepth</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>node</apiItemName><apiOperationClassifier>gear.data:GBinaryNode</apiOperationClassifier><apiData>null</apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="gear.data:GBinaryNode:isLeft"><apiName>isLeft</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="gear.data:GBinaryNode:isRight"><apiName>isRight</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="gear.data:GBinaryNode:protected:_data"><apiName>_data</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Object"/></apiValueDef></apiValueDetail></apiValue><apiValue id="gear.data:GBinaryNode:protected:_left"><apiName>_left</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>gear.data:GBinaryNode</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="gear.data:GBinaryNode:protected:_parent"><apiName>_parent</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>gear.data:GBinaryNode</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="gear.data:GBinaryNode:protected:_right"><apiName>_right</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>gear.data:GBinaryNode</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="gear.data:GBinaryNode:data:get"><apiName>data</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef></apiValueDetail></apiValue><apiValue id="gear.data:GBinaryNode:left:get"><apiName>left</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>gear.data:GBinaryNode</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="gear.data:GBinaryNode:parent:get"><apiName>parent</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>gear.data:GBinaryNode</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="gear.data:GBinaryNode:right:get"><apiName>right</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>gear.data:GBinaryNode</apiValueClassifier></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="gear.data:GLocalSO"><apiName>GLocalSO</apiName><shortdesc>
	 本地共享对象类
	 
	 </shortdesc><prolog><author>bright
	 </author><asMetadata/><asCustoms><version>20130110
	 </version></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 本地共享对象类
	 
	 </apiDesc></apiClassifierDetail><apiConstructor id="gear.data:GLocalSO:GLocalSO"><apiName>GLocalSO</apiName><shortdesc>
		 构造函数
		 
		 </shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiDesc>本地对象名称
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 构造函数
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="gear.data:GLocalSO:clear"><apiName>clear</apiName><shortdesc>
		 清除此本地对象中的所有数据
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 清除此本地对象中的所有数据
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="gear.data:GLocalSO:flush"><apiName>flush</apiName><shortdesc>
		 保存数据到本地对象
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Boolean 成功
		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 保存数据到本地对象
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="gear.data:GLocalSO:getBy"><apiName>getBy</apiName><shortdesc>
		 getAt 获得键值
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="String"/><apiDesc>键
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 getAt 获得键值
		 
		 </apiDesc><example>
		 <codeblock rev="3.0">
		 var lso:GLocalSO=new GLocalSO("game")
		 trace(lso.getAt("key")); // 如果flush成功则输出"value"
		 </codeblock>
		 </example></apiOperationDetail><related-links><link href="gear.data.xml#GLocalSO/setAt()"><linktext>setAt()</linktext></link></related-links></apiOperation><apiOperation id="gear.data:GLocalSO:setAt"><apiName>setAt</apiName><shortdesc>
		 setAt 设置键值
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="String"/><apiDesc>键
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>值
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 setAt 设置键值
		 
		 </apiDesc><example>
		 <codeblock rev="3.0">
		 var lso:GLocalSO=new GLocalSO("game");
		 lso.setAt("key","value");
		 lso.flush();
		 </codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="gear.data:GLocalSO:showSetting"><apiName>showSetting</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="gear.data:GBinaryTree"><apiName>GBinaryTree</apiName><shortdesc>
	 二叉树
	 
	 </shortdesc><prolog><author>BrightLi
	 </author><asMetadata/><asCustoms><version>20121112
	 </version></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 二叉树
	 
	 </apiDesc></apiClassifierDetail><apiConstructor id="gear.data:GBinaryTree:GBinaryTree"><apiName>GBinaryTree</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="gear.data:GBinaryTree:clear"><apiName>clear</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="gear.data:GBinaryTree:toArray"><apiName>toArray</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/></apiReturn><apiParam><apiItemName>node</apiItemName><apiOperationClassifier>gear.data:GBinaryNode</apiOperationClassifier></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="gear.data:GBinaryTree:traverse"><apiName>traverse</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>gear.data:GBinaryNode</apiOperationClassifier></apiReturn><apiParam><apiItemName>node</apiItemName><apiOperationClassifier>gear.data:GBinaryNode</apiOperationClassifier></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="gear.data:GBinaryTree:root"><apiName>root</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>gear.data:GBinaryNode</apiValueClassifier></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="gear.data:GHashMap"><apiName>GHashMap</apiName><shortdesc>
	 哈希表
	 
	 </shortdesc><prolog><author>bright
	 </author><asMetadata/><asCustoms><version>20130116
	 </version></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 哈希表
	 
	 </apiDesc></apiClassifierDetail><apiConstructor id="gear.data:GHashMap:GHashMap"><apiName>GHashMap</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="gear.data:GHashMap:clear"><apiName>clear</apiName><shortdesc>
		 清除所有的键值
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 清除所有的键值
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="gear.data:GHashMap:containsKey"><apiName>containsKey</apiName><shortdesc>
		 是否包含键
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>是否有键
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>键
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 是否包含键
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="gear.data:GHashMap:containsValue"><apiName>containsValue</apiName><shortdesc>
		 是否包含值
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>是否有值
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>值
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 是否包含值
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="gear.data:GHashMap:getAt"><apiName>getAt</apiName><shortdesc>
		 根据索引对应的值
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>索引对应的值
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>索引
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 根据索引对应的值
		 </apiDesc><example>
		 <codeblock rev="3.0">
		 var hashMap:HashMap=new HashMap();
		 hashMap.put("key","value");
		 var result:String=hashMap.getAt(0);
		 </codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="gear.data:GHashMap:getBy"><apiName>getBy</apiName><shortdesc>
		 根据键
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>键对值
	     </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>键
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 根据键
		 
		 </apiDesc><example>
		 <codeblock rev="3.0">
		 var hashMap:GHashMap=new GHashMap();
		 hashMap.put("key","value");
		 var result:String=hashMap.getBy("key");
		 </codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="gear.data:GHashMap:isEmpty"><apiName>isEmpty</apiName><shortdesc>
		 是否为空
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>是否为空
		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 是否为空
		 
		 </apiDesc><example>
		 <codeblock rev="3.0">
		 var hashMap:HashMap=new HashMap();
		 hashMap.put("key","value");
		 trace(hashMap.isEmpty) // 输出 flase
		 </codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="gear.data:GHashMap:put"><apiName>put</apiName><shortdesc>
		 放入键-值
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>键
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>值
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 放入键-值
		 
		 </apiDesc><example>
		 <codeblock rev="3.0">
		 var hashMap:GHashMap=new GHashMap();
		 hashMap.put("key","value");
		 </codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="gear.data:GHashMap:removeBy"><apiName>removeBy</apiName><shortdesc>
		 删除键
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>键对应索引
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="any"/><apiDesc>键
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 删除键
		 
		 </apiDesc><example>
		 <codeblock rev="3.0">
		 var hashMap:HashMap=new HashMap();
		 hashMap.put("key","value");
		 var index:int=hashMap.removeBy("key");
		 </codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="gear.data:GHashMap:toArray"><apiName>toArray</apiName><shortdesc>
		 转换成值数组
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>转换后的值数组
		 </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
		 转换成值数组
		 
		 </apiDesc><example>
		 <codeblock rev="3.0">
		 var hashMap:GHashMap=new GHashMap();
		 hashMap.put("key","value");
		 trace(hashMap.toArray()) // 输出["value"]
		 </codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="gear.data:GHashMap:toString"><apiName>toString</apiName><shortdesc>
		 转换成字符串
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>字符串
		 </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
		 转换成字符串
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="gear.data:GHashMap:keys:get"><apiName>keys</apiName><shortdesc>
		 获得键组
		 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Vector$Object"/></apiValueDef><apiDesc>
		 获得键组
		 
		 </apiDesc><example>
		 <codeblock rev="3.0">
		 var hashMap:HashMap=new HashMap();
		 hashMap.put("key","value");
		 trace(hashMap.keys); // 输出["key"]
		 </codeblock>
		 </example></apiValueDetail></apiValue><apiValue id="gear.data:GHashMap:randomValue:get"><apiName>randomValue</apiName><shortdesc>
		 获得随机值
		 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/></apiValueDef><apiDesc>
		 获得随机值
		 
		 </apiDesc><example><codeblock rev="3.0">
		 var hashMap:HashMap=new HashMap();
		 hashMap.put("key1","value1");
		 hashMap.put("key2","value2");
		 trace(hashMap.randomValue) // 输出"value1"或"value2"
		 </codeblock>
		 </example></apiValueDetail></apiValue><apiValue id="gear.data:GHashMap:size:get"><apiName>size</apiName><shortdesc>
		 获得哈希表大小
		 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/></apiValueDef><apiDesc>
		 获得哈希表大小
		 
		 </apiDesc><example>
		 <codeblock rev="3.0">
		 var hashMap:HashMap=new HashMap();
		 hashMap.put("key","value");
		 trace(hashMap.size); // 输出1
		 </codeblock>
		 </example></apiValueDetail></apiValue><apiValue id="gear.data:GHashMap:values:get"><apiName>values</apiName><shortdesc>
		 获得键值字典
		 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
		 获得键值字典
		 
		 </apiDesc><example>
		 <codeblock rev="3.0">
		 var hashMap:HashMap=new HashMap();
		 hashMap.put("key","value");
		 Logger.debug(hashMap.values); // 输出[debug]{"key","value"}
		 </codeblock>
		 </example></apiValueDetail></apiValue></apiClassifier><apiClassifier id="gear.data:GBinaryHeap"><apiName>GBinaryHeap</apiName><shortdesc>
	 二叉堆
	 
	 </shortdesc><prolog><author>bright
	 </author><asMetadata/><asCustoms><version>20130104
	 
	 </version></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 二叉堆
	 
	 </apiDesc><example>
	 <list version="3.0">
	 var bh:GBinaryHeap=new GBinaryHeap();
	 bh.comparse=function(source:int,target:int){
	     return source-target;
	 }
	 bh.push(3);
	 bh.push(1);
	 trace(bh.shift()) // 输出1
	 </list>
	 </example></apiClassifierDetail><apiConstructor id="gear.data:GBinaryHeap:GBinaryHeap"><apiName>GBinaryHeap</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>compare</apiItemName><apiType value="Function"/></apiParam></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="gear.data:GBinaryHeap:clear"><apiName>clear</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="gear.data:GBinaryHeap:push"><apiName>push</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="any"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="gear.data:GBinaryHeap:reset"><apiName>reset</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="any"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="gear.data:GBinaryHeap:shift"><apiName>shift</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="gear.data:GBinaryHeap:length:get"><apiName>length</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef></apiValueDetail></apiValue></apiClassifier></apiPackage>