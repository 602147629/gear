<?xml version="1.0" encoding="UTF-8"?><apiPackage id="gear.socket"><apiName>gear.socket</apiName><apiDetail/><apiClassifier id="gear.socket:SocketData"><apiName>SocketData</apiName><shortdesc>
	 Socket定义
	 
	 </shortdesc><prolog><author>bright
	 </author><asMetadata/><asCustoms><version>20100115
	 </version></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Socket定义
	 
	 </apiDesc></apiClassifierDetail><apiConstructor id="gear.socket:SocketData:SocketData"><apiName>SocketData</apiName><shortdesc>
		 构造函数
		 
		 </shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiDesc>名称
		 </apiDesc></apiParam><apiParam><apiItemName>host</apiItemName><apiType value="String"/><apiDesc>IP地址
		 </apiDesc></apiParam><apiParam><apiItemName>port</apiItemName><apiType value="int"/><apiDesc>端口
		 </apiDesc></apiParam><apiParam><apiItemName>flag</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>标识
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 构造函数
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="gear.socket:SocketData:equals"><apiName>equals</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiOperationClassifier>gear.socket:SocketData</apiOperationClassifier></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="gear.socket:SocketData:toString"><apiName>toString</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="gear.socket:SocketData:flag:get"><apiName>flag</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="gear.socket:SocketData:host:get"><apiName>host</apiName><shortdesc>
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
		 </apiDesc></apiValueDetail></apiValue><apiValue id="gear.socket:SocketData:name:get"><apiName>name</apiName><shortdesc>
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
		 </apiDesc></apiValueDetail></apiValue><apiValue id="gear.socket:SocketData:port:get"><apiName>port</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="gear.socket:OnlySyncModel"><apiName>OnlySyncModel</apiName><shortdesc>
	 唯一同步模型
	 
	 </shortdesc><prolog><author>bright
	 </author><asMetadata/><asCustoms><version>20101020
	 </version></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 唯一同步模型
	 
	 </apiDesc></apiClassifierDetail><apiConstructor id="gear.socket:OnlySyncModel:OnlySyncModel"><apiName>OnlySyncModel</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>socket</apiItemName><apiOperationClassifier>gear.socket:SocketClient</apiOperationClassifier></apiParam><apiParam><apiItemName>delay</apiItemName><apiType value="int"/><apiData>300</apiData></apiParam></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="gear.socket:OnlySyncModel:add"><apiName>add</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>args</apiItemName><apiType value="Array"/></apiParam><apiParam><apiItemName>update</apiItemName><apiType value="Boolean"/><apiData>true</apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="gear.socket:OnlySyncModel:clear"><apiName>clear</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>method</apiItemName><apiType value="String"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="gear.socket:OnlySyncModel:stop"><apiName>stop</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="gear.socket:GCallData"><apiName>GCallData</apiName><shortdesc>
	 反射数据类
	 
	 </shortdesc><prolog><author>bright
	 </author><asMetadata/><asCustoms><version>20111111
	 </version></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 反射数据类
	 
	 </apiDesc></apiClassifierDetail><apiConstructor id="gear.socket:GCallData:GCallData"><apiName>GCallData</apiName><shortdesc>
		 CallData 
		 
		 </shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>method</apiItemName><apiType value="String"/><apiDesc>String 方法名
		 </apiDesc></apiParam><apiParam><apiItemName>args</apiItemName><apiType value="Array"/><apiDesc>Array 参数数组
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 CallData 
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="gear.socket:GCallData:parse"><apiName>parse</apiName><shortdesc>
		 获得从Object中解析成的CallData
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>ect中解析成的CallData
		 
		 </apiDesc><apiOperationClassifier>gear.socket:GCallData</apiOperationClassifier></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Object
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 获得从Object中解析成的CallData
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="gear.socket:GCallData:toString"><apiName>toString</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="gear.socket:GCallData:args:get"><apiName>args</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef></apiValueDetail></apiValue><apiValue id="gear.socket:GCallData:method:get"><apiName>method</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="gear.socket:GCallPool"><apiName>GCallPool</apiName><shortdesc>
	 CallPool 反射池
	 
	 </shortdesc><prolog><author>bright
	 </author><asMetadata/><asCustoms><version>20101008
	 </version></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>gear.core:IDispose</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 CallPool 反射池
	 
	 </apiDesc></apiClassifierDetail><apiConstructor id="gear.socket:GCallPool:GCallPool"><apiName>GCallPool</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="gear.socket:GCallPool:addCallback"><apiName>addCallback</apiName><shortdesc>
		 addCallback 加入反射
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>method</apiItemName><apiType value="String"/><apiDesc>String 方法名
		 </apiDesc></apiParam><apiParam><apiItemName>callback</apiItemName><apiType value="Function"/><apiDesc>Function 回调函数 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 addCallback 加入反射
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="gear.socket:GCallPool:addRequest"><apiName>addRequest</apiName><shortdesc>
		 addRequest 加入请求包
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>request</apiItemName><apiOperationClassifier>gear.socket:GCallData</apiOperationClassifier><apiDesc>CallData 反射数据
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 addRequest 加入请求包
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="gear.socket:GCallPool:dispose"><apiName>dispose</apiName><shortdesc>
		  dispose 释放资源
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		  dispose 释放资源
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="gear.socket:GCallPool:getCallback"><apiName>getCallback</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/></apiReturn><apiParam><apiItemName>method</apiItemName><apiType value="String"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="gear.socket:GCallPool:removeCallback"><apiName>removeCallback</apiName><shortdesc>
		 removeCallback 移除反射
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>method</apiItemName><apiType value="String"/><apiDesc>String 方法名
		 </apiDesc></apiParam><apiParam><apiItemName>callback</apiItemName><apiType value="Function"/><apiDesc>Function 回调函数 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 removeCallback 移除反射
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="gear.socket:GCallPool:size:get"><apiName>size</apiName><shortdesc>
		 size
		 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 size
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="gear.socket:GCallPool:queue:set"><apiName>queue</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="gear.socket:ISyncObject"><apiName>ISyncObject</apiName><shortdesc>
	 </shortdesc><prolog><author>BrightLi
	 </author><asMetadata/><asCustoms><version>20100315
	 </version></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 </apiDesc></apiClassifierDetail><apiOperation id="gear.socket:ISyncObject:gear.socket:ISyncObject:parse"><apiName>parse</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="gear.socket:ISyncObject:gear.socket:ISyncObject:toObject"><apiName>toObject</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="gear.socket:SocketCall"><apiName>SocketCall</apiName><shortdesc>
	 </shortdesc><prolog><author>flashpf
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 </apiDesc></apiClassifierDetail><apiConstructor id="gear.socket:SocketCall:SocketCall"><apiName>SocketCall</apiName><shortdesc>
		 </shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>method</apiItemName><apiType value="String"/><apiDesc>方法名
		 </apiDesc></apiParam><apiParam><apiItemName>invoke</apiItemName><apiType value="Function"/><apiDesc>响应函数
		 </apiDesc></apiParam><apiParam><apiItemName>call</apiItemName><apiType value="Function"/><apiDesc>回调函数
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="gear.socket:SocketCall:call:get"><apiName>call</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Function"/></apiValueDef></apiValueDetail></apiValue><apiValue id="gear.socket:SocketCall:invoke:get"><apiName>invoke</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Function"/></apiValueDef></apiValueDetail></apiValue><apiValue id="gear.socket:SocketCall:method:get"><apiName>method</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="gear.socket:SocketFlag"><apiName>SocketFlag</apiName><shortdesc>
	 Socket标识
	 
	 </shortdesc><prolog><author>bright
	 </author><asMetadata/><asCustoms><version>20101015
	 </version></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Socket标识
	 
	 </apiDesc></apiClassifierDetail><apiValue id="gear.socket:SocketFlag:HOT"><apiName>HOT</apiName><shortdesc>
		 热门
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1</apiData><apiType value="int"/></apiValueDef><apiDesc>
		 热门
		 </apiDesc></apiValueDetail></apiValue><apiValue id="gear.socket:SocketFlag:NEW"><apiName>NEW</apiName><shortdesc>
		 新服
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2</apiData><apiType value="int"/></apiValueDef><apiDesc>
		 新服
		 </apiDesc></apiValueDetail></apiValue><apiValue id="gear.socket:SocketFlag:NONE"><apiName>NONE</apiName><shortdesc>
		 正常
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0</apiData><apiType value="int"/></apiValueDef><apiDesc>
		 正常
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="gear.socket:RtmpClient"><apiName>RtmpClient</apiName><shortdesc>
	 Rtmp客户端
	 
	 </shortdesc><prolog><author>bright
	 </author><asMetadata/><asCustoms><version>20101015
	 </version></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Rtmp客户端
	 
	 </apiDesc></apiClassifierDetail><apiConstructor id="gear.socket:RtmpClient:RtmpClient"><apiName>RtmpClient</apiName><shortdesc>
		 构造函数
		 
		 </shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>host</apiItemName><apiType value="String"/><apiDesc>RTMP服务器地址 
		 </apiDesc></apiParam><apiParam><apiItemName>appName</apiItemName><apiType value="String"/><apiDesc>RTMP应用名称
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 构造函数
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="gear.socket:RtmpClient:connect"><apiName>connect</apiName><shortdesc>
		 开始连接
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 开始连接
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="gear.socket:RtmpClient:disconnect"><apiName>disconnect</apiName><shortdesc>
		 断开连接
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 断开连接
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="gear.socket:RtmpClient:ADD_MY_USER"><apiName>ADD_MY_USER</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>addMyUser</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="gear.socket:RtmpClient:PRIVATE_MSG"><apiName>PRIVATE_MSG</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>privateMsg</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="gear.socket:RtmpClient:nc:get"><apiName>nc</apiName><shortdesc>
		 获得NC连接
		 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.net:NetConnection"/></apiValueDef><apiDesc>
		 获得NC连接
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="gear.socket:SocketClient"><apiName>SocketClient</apiName><shortdesc>
	 Socket客户端
	 
	 </shortdesc><prolog><author>bright
	 </author><asMetadata/><asCustoms><version>20111207
	 </version></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Socket客户端
	 
	 </apiDesc></apiClassifierDetail><apiConstructor id="gear.socket:SocketClient:SocketClient"><apiName>SocketClient</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="gear.socket:SocketClient:addCallback"><apiName>addCallback</apiName><shortdesc>
		 addCallback
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>method</apiItemName><apiType value="String"/><apiDesc>String 回调方法名
		 </apiDesc></apiParam><apiParam><apiItemName>callback</apiItemName><apiType value="Function"/><apiDesc>Function 回调函数
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 addCallback
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="gear.socket:SocketClient:call"><apiName>call</apiName><shortdesc>
		 call 远程调用
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>method</apiItemName><apiType value="String"/><apiDesc>方法名
		 </apiDesc></apiParam><apiParam><apiItemName>args</apiItemName><apiType value="restParam"/><apiDesc>参数数组
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 call 远程调用
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="gear.socket:SocketClient:connected"><apiName>connected</apiName><shortdesc>
		 connected
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Boolean 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiOperationClassifier>gear.socket:SocketData</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
		 connected
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="gear.socket:SocketClient:connect"><apiName>connect</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiOperationClassifier>gear.socket:SocketData</apiOperationClassifier></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="gear.socket:SocketClient:disconnect"><apiName>disconnect</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="gear.socket:SocketClient:removeCallback"><apiName>removeCallback</apiName><shortdesc>
		 removeCallback
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>method</apiItemName><apiType value="String"/><apiDesc>String 回调方法名
		 </apiDesc></apiParam><apiParam><apiItemName>callback</apiItemName><apiType value="Function"/><apiDesc>Function 回调函数
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 removeCallback
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="gear.socket:SocketClient:setDealStrategy"><apiName>setDealStrategy</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>queue</apiItemName><apiType value="Boolean"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="gear.socket:SocketClient:setTest"><apiName>setTest</apiName><shortdesc>
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>gear.socket:SocketCall</apiOperationClassifier><apiDesc>测试调用
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="gear.socket:SocketClient:CLOSE"><apiName>CLOSE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>close</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="gear.socket:SocketClient:IO_ERROR"><apiName>IO_ERROR</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ioError</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="gear.socket:SocketClient:SECURITY_ERROR"><apiName>SECURITY_ERROR</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>securityError</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="gear.socket:SocketClient:data:get"><apiName>data</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>gear.socket:SocketData</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="gear.socket:SocketClient:isActive:get"><apiName>isActive</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="gear.socket:SocketClient:readBytes:get"><apiName>readBytes</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/></apiValueDef></apiValueDetail></apiValue><apiValue id="gear.socket:SocketClient:writeBytes:get"><apiName>writeBytes</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/></apiValueDef></apiValueDetail></apiValue></apiClassifier></apiPackage>